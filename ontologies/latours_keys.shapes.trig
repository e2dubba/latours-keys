@prefix ant: <https://e2dubba.github.io/latours-keys/ontology/v1#> .
@prefix sh:    <http://www.w3.org/ns/shacl#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix xml: <http://www.w3.org/XML/1998/namespace> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix schema: <http://schema.org/> .
@prefix skos:  <http://www.w3.org/2004/02/skos/core#> .
@prefix gist: <https://ontologies.semanticarts.com/gist/> .

@prefix lks: <https://e2dubba.github.io/latours-keys/shapes/> .

# How Do we model an Action?

lks:EndStateShape {
  lks:EndStateShape a sh:NodeShape
    ; rdfs:comment 'This is more about the desired state and/or location at the conclusions of the program'@en
    ; rdfs:comment "we can't model the action, but we can model the desired outcome"@en
    ; rdfs:comment "though, maybe we should think about modeling Stored Procedures"@en
    ; rdfs:comment "should we call it desired outcome? Maybe just the path will be desried outcome"@en
    ; rdfs:comment 'use qualified value'@en
    ; skos:editorialNote "The endstate should have both a ant:State class as well as another class distinguishing its character"@en
  ; sh:property [
    sh:path rdf:type
    ; sh:class ant:State
  ]
  ; sh:property [
    sh:path rdf:type
    ; sh:qualifiedValueShape [
      sh:class gist:GeoLocation
    ]
  ]
  ; sh:property [
    sh:path rdf:type
    ; sh:qualifiedValueShape [
      sh:class ant:Mood
    ]
  ]
  ; sh:property [
    sh:path rdf:type
    ; sh:qualifiedValueShape [
      sh:class ant:Position
    ]
  ]
  .
}

lks:IntentionShape {
  lks:IntentionShape a sh:NodeShape
    ; sh:targetClass ant:Intention
    ; rdfs:comment "the intention or goal of the program"@en
    ; rdfs:comment ' Keys:\n - Manager wants Patrons to return key to desk.\n - Room Lock wants to keep Actants out who do not have authorization . \n -- Room Locks have mood: how sticky or obstinate they are\n - What about when phones replace keys?\n  Camera: Kodak wants People to buy camera.\n Scallops:\n - Scientist want to revitilze Scallop population.\n -- Scientists want scallops to thrive .\n - Fishermen want sustainable income.\n - Towns people want more tourists (not in this example, but in another ecology example)\n '
    ; rdfs:comment 'Intention is about someone; who wants something; to be someplace/in a state (can we generalize it to state?)'
    ; sh:property [
      sh:path ant:fromPerspectiveOf
      ; sh:class ant:Actant
      ; sh:name "From Perspective Of"@en
      ; sh:description "The architect(s) of the program "@en
      ; sh:minCount 1
      ; skos:editorialNote "Maybe this should be about a particular target class, and it can have multiple actants as the perspective"@en
    ]
    ; sh:property [
      sh:path ant:concernedAbout
      ; sh:class ant:Actant
      ; sh:description "An actant that the program intends to exist in a particular end state"
      ; sh:minCount 1
    ]
    ; sh:property [
      sh:path ant:desiredEndState
      ; sh:node ant:EndStateShape
      ; sh:minCount 1
    ]
    .
}

lks:ProgramShape {
  lks:ProgramShape a sh:NodeShape
    ; sh:targetClass ant:Program
    ; rdfs:comment "The program is the intention of an actor concerning other actants"@en
    ; skos:editorialNote "a program is view or perspective of the network, a vantage point"@en
    ; skos:editorialNote "The implementation of versioning for this example could be either used with RDF* or by refering to the versions with Named Graphs, neither of these are dependent on the shape, but will change with implementation"@en
    ; sh:property [
      sh:path ant:hasIntention
        ; sh:class ant:Intention
        ; rdfs:comment "The intention is the goal or behaviorial change the program architect of the program wishes on the system"@en
    ]
    ; sh:property [
      sh:path ant:hasAdherent
        ; sh:class ant:Actant
        ; rdfs:comment "Adherents include both human and non-human actors, as well as the program architect"@en
    ]
    ; sh:property [
      sh:path ant:hasVersion
        ; sh:datatype xsd:integer
        ; sh:minCount 1
        ; sh:maxCount 1
        ; rdfs:comment "The number of iterations a program goes through and the changes these iterations make"@en
    ]
    ; sh:property [
      sh:path ant:hasPreviousImplementation
        ; sh:node lks:ProgramShape
        ; rdfs:comment "a link to the previous version of the program. Each iteration of the program has its own shape, a new implementation is an entirely new program"@en
    ]
}

lks:DispositionShape {
  lks:DispositionShape a sh:NodeShape
  ; sh:targetClass ant:Disposition
  ; sh:property [
    sh:path ant:withMood
    ; sh:class ant:Mood
    ; sh:name "Mood"@en
    ; sh:description "Different measures of willingness that an actant has towards a program"
    ; sh:minCount 1
    ; sh:maxCount 1
    ; sh:order 2
  ]
  ; sh:property [
    sh:path ant:dispositionLevel
    ; sh:datatype xsd:integer
    ; sh:minValue -10
    ; sh:maxValue 10
    ; sh:minCount 1
    ; sh:maxCount 1
    ; sh:order 3
  ]
}

lks:ProgramDispositionShape {
  # Inacted Disposition?
  lks:ProgramDispositionShape a sh:NodeShape
  ; sh:targetClass ant:ProgramDisposition
  ; sh:property [
    sh:path ant:targetProgram
    ; sh:class ant:Program
    ; sh:minCount 1
    ; sh:maxCount 1
    ; sh:order 1
  ]
  ; sh:property [
    sh:path ant:inactedDisposition
    ; sh:node lks:DispositionShape
    ; rdfs:comment "A node link to the disposition shape"@en
  ]
  ; sh:property [
    sh:path [
      sh:inversePath ant:hasProgramDisposition
    ]
    ; sh:minCount 1
    ; sh:maxCount 1
  ]
}

lks:LanguageFluencyShape {
  lks:LanguageFluency a sh:NodeShape
  ; sh:targetClass ant:LanguageFluency
  ; sh:property [
    sh:path schema:knowsLanguage
    ; sh:class schema:Language
    ; sh:minCount 1
    ; sh:maxCount 1
    ; sh:order 1
  ]
  ; sh:property [
    sh:path ant:fluencyLevel
    ; sh:datatype xsd:integer
    ; sh:minValue 1
    ; sh:maxValue 10
    ; rdfs:comment "on a scale from 1 to 10"@en
    ; sh:minCount 1
    ; sh:maxCount 1
  ]
}

lks:HumanActorShape {
  lks:HumanActorShape a sh:NodeShape
  ; sh:targetClass ant:HumanActor
   ; sh:property [
    sh:path gist:name
    ; sh:datatype xsd:string
    ; sh:minCount 1
    ; sh:maxCount 1
    ; sh:order 1
  ]
  ; sh:property [
    sh:path ant:inherentDisposition
    ; sh:class ant:Disposition
    ; rdfs:comment "The inherent disposition is not really about modeling the key example, its about crating a future automated example"@en
  ]
  ; rdfs:comment "Do we need to include more categories?"
}

lks:CustomerShape {
  lks:CustomerShape a sh:NodeShape
  ; sh:targetClass ant:Customer
  ; sh:property [
    sh:path ant:residesIn
    ; sh:class gist:GeoPoliticalRegion
    ; sh:order 10
  ]
  ; sh:property [
    sh:path ant:hasProgramDisposition
    ; skos:editorialNote "Does a customer have dispositions _before_ they interact with a program? Each program interaction is going to have a different set of dispositions, but do we need to model their internal dispositions? Can we? What other factors go into creating this disposition?"@en
    ; sh:node lks:ProgramDispositionShape
    ; sh:order 3
  ]
  ; sh:property [
    sh:path ant:hasLanguageFleuncy
    ; sh:node lks:LanguageFluencyShape
    ; sh:order 4
  ]
  ; sh:property [
    sh:path ant:hasReservation
    ; sh:node lks:ReservationShape
    ; sh:order 5
  ]
  .
}

lks:HotelManagerShape {
  lks:HotelManagerShape a sh:NodeShape
  ; sh:targetClass ant:HotelManager
  ; sh:property [
    sh:path ant:administratesProgram
    ; sh:class ant:Program
  ]
}

lks:ReservationShape {
  lks:ReservationShape a sh:NodeShape
  ; sh:targetClass ant:Reservation
  ; sh:property [
    sh:path gist:actualStart
    ; sh:datatype xsd:datetime
    ; sh:order 1
  ]
  ; sh:property [
    sh:path gist:acutalEnd
    ; sh:datatype xsd:datetime
    ; sh:order 2
  ]
  ; sh:property [
    sh:path ant:concernedAbout
    ; sh:class ant:HotelRoom
    ; sh:order 3
  ]
  .
}

lks:HotelRoomShape {
  lks:HotelRoomShape a sh:NodeShape
  ; sh:targetClass ant:HotelRoom
  ; sh:property [
    sh:path skos:prefLabel
    ; sh:datatype rdf:langString
    ; sh:order 1
  ]
  ; sh:property [
    sh:path ant:hasKey
    ; sh:node ant:KeyShape
  ]
  ; sh:property [
    sh:path [ sh:inversePath ant:fitsRoom ]
    ; sh:minCount 1
    ; sh:maxCount 1
    ; rdfs:comment "The inverse path assures us that only one room fits one key"@en
  ]
}

lks:KeyShape {
  lks:KeyShape a sh:NodeShape
  ; sh:targetClass ant:Key
  ; sh:property [
    sh:path ant:fitsRoom
    ; sh:class ant:HotelRoom
  ]
  ; sh:property [
    sh:path ant:fitsRoom
    ; sh:class ant:HotelRoom
  ]
  .
}

lks:SignShape {
  lks:SignShape a sh:NodeShape
  ; sh:targetClass ant:Sign
  ; sh:property [
    sh:path schema:inLanguage
    ; sh:class schema:Language
  ]
  ; sh:property [
    sh:path ant:hasMessage
    ; sh:class ant:Message
  ]
  .
}

lks:WeightShape {
  lks:WeightShape a sh:NodeShape
  ; sh:targetClass ant:Weight
  ; sh:property [
    sh:path ant:hasMassInKg
    ; sh:datatype xsd:decimal
    ; sh:minCount 1
    ; sh:maxCount 1
  ]
  ; sh:property [
    sh:path ant:connectedTo
    ; sh:class ant:Actant
    ; rdfs:comment "for our example, the weights are connected to something, but they don't have to be."@en
  ]
}
